# Stateful set
# Spread constraints to evenly distribute pods across AZs based on node's zone label
# Affinity to 'not' deploy to default nodepool
# DownwardApi to get node info
# VolumeClaimTemplates to dynamically provision a disk volume per pod
# Finally exposing statefulset as a loadbalancer service (not headless)

apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: py-web-ns
spec: {}
status: {}

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources
  namespace: py-web-ns
spec:
  hard:
    requests.cpu: "2"
    requests.memory: 2Gi
    limits.cpu: "4"
    limits.memory: 4Gi
---
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu-mem-min-max-demo-lr
  namespace: py-web-ns
spec:
  limits:
    - max:
        cpu: "600m"
        memory: "256Mi"
      min:
        cpu: "200m"
        memory: "32Mi"
      type: Container
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: py-web
  namespace: py-web-ns
spec:
  selector:
    matchLabels:
      app: py-web
  serviceName: "py-web-svc"
  replicas: 3
  template:
    metadata:
      labels:
        app: py-web
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: py-web
          image: ghcr.io/suren-m/kube-cart/workload-allocation/stateful-set:py
          ports:
            - containerPort: 9090
              name: web
          resources:
            requests:
              memory: "64Mi"
              cpu: "200m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          env: # Downward API to collect deployed Nodename
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
      # nodeSelector:
      #   owner: demo-product-team
      #   workloads-type: web
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            # weight: 100 (helps when having fallbacks)
            nodeSelectorTerms:
              - matchExpressions:
                  - key: owner
                    operator: In
                    values:
                      - demo-product-team
                  - key: workloads-type
                    operator: In
                    values:
                      - web
      tolerations:
        - key: "workloads"
          operator: "Equal"
          value: "demo-product"
          effect: "NoSchedule"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
      # labelSelector:
      #   matchLabels:
      #     workloads-type: web
---
apiVersion: v1
kind: Service
metadata:
  name: py-web-svc
  namespace: py-web-ns
  labels:
    app: py-web
  # annotations:
  #   service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  ports:
    - port: 80
      targetPort: 9090
      name: py-web
  # type: LoadBalancer
  selector:
    app: py-web
